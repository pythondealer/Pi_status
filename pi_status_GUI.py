# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pi_status.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import client_functions as client
import socket
import paramiko
from scp import SCPClient
import rsa


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(782, 533)
        Dialog.setStyleSheet("background-color: rgb(46, 52, 54);")
        self.label_Headline = QtWidgets.QLabel(Dialog)
        self.label_Headline.setGeometry(QtCore.QRect(310, 20, 211, 51))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.label_Headline.setFont(font)
        self.label_Headline.setStyleSheet("color: rgb(238, 238, 236);")
        self.label_Headline.setObjectName("label_Headline")

        self.butt_update = QtWidgets.QPushButton(Dialog)
        self.butt_update.setGeometry(QtCore.QRect(50, 250, 141, 61))
        self.butt_update.setStyleSheet("color: rgb(238, 238, 236);")
        self.butt_update.setObjectName("butt_update")
        self.butt_update.clicked.connect(lambda: self.send_cmd("update"))

        self.butt_get_log = QtWidgets.QPushButton(Dialog)
        self.butt_get_log.setGeometry(QtCore.QRect(250, 250, 141, 61))
        self.butt_get_log.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.butt_get_log.setObjectName("butt_get_log")
        self.butt_get_log.clicked.connect(lambda: self.send_cmd("log"))

        self.label_IP = QtWidgets.QLabel(Dialog)
        self.label_IP.setGeometry(QtCore.QRect(120, 90, 121, 21))
        self.label_IP.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.label_IP.setObjectName("label_IP")

        self.label_port = QtWidgets.QLabel(Dialog)
        self.label_port.setGeometry(QtCore.QRect(320, 90, 121, 21))
        self.label_port.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.label_port.setObjectName("label_port")

        self.labe_pw = QtWidgets.QLabel(Dialog)
        self.labe_pw.setGeometry(QtCore.QRect(510, 90, 121, 21))
        self.labe_pw.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.labe_pw.setObjectName("labe_pw")

        self.line_ip = QtWidgets.QLineEdit(Dialog)
        self.line_ip.setGeometry(QtCore.QRect(120, 140, 113, 24))
        self.line_ip.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.line_ip.setObjectName("line_ip")

        self.line_port = QtWidgets.QLineEdit(Dialog)
        self.line_port.setGeometry(QtCore.QRect(320, 140, 121, 24))
        self.line_port.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.line_port.setObjectName("line_port")

        self.line_pw = QtWidgets.QLineEdit(Dialog)
        self.line_pw.setGeometry(QtCore.QRect(510, 140, 121, 24))
        self.line_pw.setStyleSheet("color: rgb(238, 238, 236);\n"
"background-color: rgb(85, 87, 83);")
        self.line_pw.setObjectName("line_pw")
        self.line_pw.setEchoMode(QtWidgets.QLineEdit.Password)        

        self.butt_restart = QtWidgets.QPushButton(Dialog)
        self.butt_restart.setGeometry(QtCore.QRect(50, 350, 141, 61))
        self.butt_restart.setStyleSheet("color: rgb(238, 238, 236);")
        self.butt_restart.setObjectName("butt_restart")
        self.butt_restart.clicked.connect(lambda: self.send_cmd("restart"))

        self.butt_shutdown = QtWidgets.QPushButton(Dialog)
        self.butt_shutdown.setGeometry(QtCore.QRect(250, 350, 141, 61))
        self.butt_shutdown.setStyleSheet("color: rgb(238, 238, 236);")
        self.butt_shutdown.setObjectName("butt_shutdown")
        self.butt_shutdown.clicked.connect(lambda: self.send_cmd("stop"))

        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(440, 250, 321, 161))
        self.textEdit.setStyleSheet("color: rgb(238, 238, 236);")
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")



        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Pi_status"))
        self.label_Headline.setText(_translate("Dialog", "Pi_status"))
        self.butt_update.setText(_translate("Dialog", "Get updates"))
        self.butt_get_log.setText(_translate("Dialog", "Get log"))
        self.label_IP.setText(_translate("Dialog", "IP Adresse Server"))
        self.label_port.setText(_translate("Dialog", "Port"))
        self.labe_pw.setText(_translate("Dialog", "Password"))
        self.line_ip.setText(_translate("Dialog", "192.168.178.188"))
        self.line_port.setText(_translate("Dialog", "65432"))
        self.butt_restart.setText(_translate("Dialog", "Restart FTP"))
        self.butt_shutdown.setText(_translate("Dialog", "Shut down FTP"))

    def send_cmd(self, n):

        HOST = self.line_ip.text()
        PORT = (int(self.line_port.text()))
        priv_key = ("")
        pubkey = (b"")
        pubKey_server = ("")
        username = "pi"
        password = self.line_pw.text() 

        client.generate_rsa_key()

        client.key_exchange(password, HOST, username)
        pubKey_server = client.load_sever_key(pubKey_server)
        privKey = client.load_privKey()

        session_key = client.generate_session_key()


        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((HOST, PORT))
            print("connect")

 
            session_key_encoded = session_key.encode("UTF-8")
            session_key_crypt = client.encrypt_rsa(session_key_encoded, pubKey_server)        
            s.sendall(session_key_crypt)

            session_key_response = s.recv(1024)
            check, session_key_info = client.decrypt_verify(session_key_response, session_key, pubKey_server)

            if check == True:
                print(session_key_info)

            cmd = (n) ### n ist der parameter, der an die Funktion gegeben wird z.B "update"
            cmd_crypt = client.encrypt_sign(cmd, session_key, privKey)

            s.sendall(cmd_crypt)

            data = client.recvall(s)
            auth_bool, data_decrypt = client.decrypt_verify(data, session_key, pubKey_server)
            self.textEdit.setText(data_decrypt)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
